{"version":3,"sources":["containers/Header/ProgressCircle/ProgressCircle.js","components/Header/Header.js","axios.js","components/MainForm/Input/Input.js","components/MainForm/Circle/Circle.js","components/Modal/Modal.js","containers/MainForm/MainForm.js","components/MainForm/Input/CheckValidity/CheckValidity.js","App.js","index.js"],"names":["ProgressCircle","props","pathChecmarkClass","myTextForHundredClass","circumference","normalizedRadius","Math","PI","progress","textRef","useRef","circleRef","animateValueRef","start","end","range","current","increment","stepTime","abs","floor","counter","innerHTML","style","strokeDashoffset","timer","setInterval","clearInterval","progressRef","useLayoutEffect","height","radius","width","stroke","fill","strokeWidth","r","cx","cy","ref","strokeDasharray","strokeLinecap","transform","className","x","y","dominantBaseline","textAnchor","d","alignmentBaseline","Header","instance","axios","create","baseURL","input","inputElement","inputClasses","labelClass","invalid","shouldValidate","touched","push","contentClass","elementType","autoComplete","join","elementConfig","value","onChange","changed","label","obj","map","el","idx","key","type","Circle","checkmarkSvg","checkmarkSvgCircle","myText","checkmarkSvgCheck","valid","xmlns","preserveAspectRatio","id","filterUnits","in","stdDeviation","dx","dy","result","slope","filter","overflow","display","text","Modal","show","opacity","modalMessage","onClick","clicked","MainForm","useState","firstName","validation","required","minLength","maxLength","lastName","email","isEmail","time","isChecked","orderForm","setForm","formIsValid","setFormIsValid","showModal","setShowModal","setModalMessage","clearForm","clearedForm","document","querySelectorAll","forEach","checked","settingValidity","updatedOrderForm","validityArray","resultValidity","newProgressValidity","true","length","findProgress","formElementsArray","config","buttonClass","form","onSubmit","e","preventDefault","contact","post","then","res","catch","err","console","log","marginBottom","inputIdentifier","updatedFormElement","target","rules","isValid","trim","test","checkValidity","inputChangedHandler","App","setProgress","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.84d0ef94.chunk.js","sourcesContent":["import React, { useLayoutEffect, useRef } from \"react\";\n\nimport \"./ProgressCircle.css\";\n\nconst ProgressCircle = (props) => {\n  const radius = 25; //precnik\n  const stroke = 2;\n  const normalizedRadius = radius - stroke * 2; //normalizovani precnik bez debljine ivica\n  const circumference = normalizedRadius * 2 * Math.PI; //obim kruga\n  let progress = props.progress; // progres prosledjen preko props-a na osnovu broja validiranih elemenata\n\n  const textRef = useRef();\n  const circleRef = useRef();\n\n  const animateValue = (start, end) => {\n    const range = end - start;\n    let current = start;\n    if (range === 0) {\n      return;\n    }\n    const increment = end > start ? 1 : -1;\n    const duration = 1600;\n    const stepTime = Math.abs(Math.floor(duration / range));\n    const counter = () => {\n      current += increment;\n      textRef.current.innerHTML = `${current}%`;\n      circleRef.current.style.strokeDashoffset =\n        circumference - (current / 100) * circumference; //  formula za obracun: const strokeDashoffset = circumference - (progress / 100) * circumference;\n    };\n    counter();\n\n    const timer = setInterval(function () {\n      counter();\n      if (current === end) {\n        clearInterval(timer);\n      }\n    }, stepTime);\n  };\n\n  const animateValueRef = useRef(animateValue);\n  const progressRef = useRef(progress);\n\n  useLayoutEffect(() => {\n    animateValueRef.current(progressRef.current, progress);\n  }, [progress]);\n\n  useLayoutEffect(() => {\n    progressRef.current = progress;\n  }, [progress]);\n\n  let pathChecmarkClass, myTextForHundredClass;\n  if (progress === 100) {\n    myTextForHundredClass = \"MyTextForHundred\";\n    pathChecmarkClass = \"ChecmarkForHundred\";\n  }\n\n  return (\n    <svg height={radius * 2} width={radius * 2}>\n      <circle\n        stroke=\"#9EB7D7\"\n        fill=\"transparent\"\n        strokeWidth={stroke}\n        r={normalizedRadius}\n        cx={radius}\n        cy={radius}\n      />\n      <circle\n        ref={circleRef}\n        stroke=\"white\"\n        fill=\"transparent\"\n        strokeDasharray={`${circumference} ${circumference}`}\n        strokeDashoffset={circumference}\n        strokeWidth={stroke}\n        strokeLinecap=\"round\"\n        r={normalizedRadius}\n        cx={radius}\n        cy={radius}\n        transform={`rotate(-90 ${radius} ${radius})`}\n      />\n      <text\n        ref={textRef}\n        className={myTextForHundredClass}\n        x=\"50%\"\n        y=\"50%\"\n        dominantBaseline=\"middle\"\n        textAnchor=\"middle\"\n        fill=\"white\"\n      >\n        {progress}%\n      </text>\n      <path\n        className={pathChecmarkClass}\n        fill=\"none\"\n        d=\"m14.1 26.2 l6.1 6.2 15-15\"\n        dominantBaseline=\"middle\"\n        alignmentBaseline=\"middle\"\n      />\n    </svg>\n  );\n};\n\nexport default ProgressCircle;\n","import React from \"react\";\n\nimport \"./Header.css\";\nimport ProgressCircle from \"../../containers/Header/ProgressCircle/ProgressCircle\";\n\nconst Header = (props) => {\n  return (\n    <div className=\"Header_root\">\n      <ProgressCircle progress={props.progress} />\n      <div className=\"Header\">\n        <div>New York State</div>\n        <h1>Request for Contact</h1>\n      </div>\n    </div>\n  );\n};\n\nexport default Header;\n","import axios from \"axios\";\n\nconst instance = axios.create({\n  baseURL: \"https://ui-contact-form.firebaseio.com/\",\n});\n\nexport default instance;\n","import React from \"react\";\n\nimport \"./Input.css\";\n\nconst input = (props) => {\n  let inputElement = null;\n  const inputClasses = [\"InputElement\"];\n\n  const labelClass = [\"Label\"];\n  if (props.invalid && props.shouldValidate && props.touched) {\n    inputClasses.push(\"Invalid\");\n  }\n\n  const contentClass = [\"Content\"];\n  if (!props.invalid) {\n    contentClass.push(\"SmallLetter\");\n  }\n\n  switch (props.elementType) {\n    case \"input\":\n      inputElement = (\n        <>\n          <input\n            autoComplete=\"off\"\n            className={inputClasses.join(\" \")}\n            {...props.elementConfig}\n            value={props.value}\n            onChange={props.changed}\n          />\n          <label className={labelClass.join(\" \")}>\n            <span className={contentClass.join(\" \")}>{props.label}</span>\n          </label>\n        </>\n      );\n      break;\n    case \"checkbox\":\n      inputElement = (\n        <div>\n          <label className=\"LabelCheckbox\">{props.label}</label>\n          {props.elementConfig.obj.map((el, idx) => (\n            <div key={idx} className=\"Checkbox-main\">\n              <label className=\"Container\">\n                {el.label}\n                <input\n                  type={el.type}\n                  onChange={props.changed}\n                  key={el.label}\n                  autoComplete=\"off\"\n                  value={el.label}\n                />\n                <span className=\"Checkmark\"></span>\n              </label>\n            </div>\n          ))}\n        </div>\n      );\n      break;\n    default:\n      inputElement = (\n        <>\n          <input\n            autoComplete=\"off\"\n            className={inputClasses.join(\" \")}\n            {...props.elementConfig}\n            value={props.value}\n            onChange={props.changed}\n          />\n          <label className={labelClass.join(\" \")}>\n            <span className={contentClass.join(\" \")}>{props.label}</span>\n          </label>\n        </>\n      );\n  }\n\n  return <div className=\"Input\">{inputElement}</div>;\n};\n\nexport default input;\n","import React from \"react\";\n\nimport \"./Circle.css\";\n\nconst Circle = (props) => {\n  const radius = 20; //precnik\n  const stroke = 1.5;\n  const normalizedRadius = radius - stroke * 2; //normalizovani precnik bez debljine ivica\n  const circumference = normalizedRadius * 2 * Math.PI; //obim kruga\n\n  let checkmarkSvg, checkmarkSvgCircle, myText, checkmarkSvgCheck;\n  if (props.valid) {\n    checkmarkSvg = \"CheckmarkSvg\";\n    checkmarkSvgCircle = \"CheckmarkSvg__circle\";\n    myText = \"myText\";\n    checkmarkSvgCheck = \"CheckmarkSvg__check\";\n  }\n\n  return (\n    <svg\n      className={checkmarkSvg}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      height={radius * 2}\n      width={radius * 2}\n      preserveAspectRatio=\"none\"\n    >\n      <defs>\n        {/* filter za pravljenje senke */}\n        <filter\n          id=\"dropshadow\"\n          x=\"-40%\"\n          y=\"-40%\"\n          width=\"180%\"\n          height=\"180%\"\n          filterUnits=\"userSpaceOnUse\"\n        >\n          <feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"1\" />\n          <feOffset dx=\"-1\" dy=\"0.2\" result=\"offsetblur\" />\n          <feComponentTransfer>\n            <feFuncA type=\"linear\" slope=\"0.4\" />\n          </feComponentTransfer>\n          <feMerge>\n            <feMergeNode />\n            <feMergeNode in=\"SourceGraphic\" />\n            <feMergeNode in=\"SourceGraphic\" />\n          </feMerge>\n        </filter>\n      </defs>\n      <circle\n        className={checkmarkSvgCircle}\n        filter=\"url(#dropshadow)\"\n        stroke=\"#2296F3\"\n        fill=\"white\"\n        overflow=\"hidden\"\n        strokeDasharray={circumference}\n        strokeDashoffset={circumference}\n        strokeWidth={stroke}\n        strokeLinecap=\"round\"\n        r={normalizedRadius}\n        cx={radius}\n        cy={radius}\n        transform={`rotate(-90 ${radius} ${radius})`}\n      ></circle>\n      <text\n        className={myText}\n        x=\"50%\"\n        y=\"50%\"\n        strokeWidth={0.5}\n        dominantBaseline=\"middle\"\n        alignmentBaseline=\"middle\"\n        textAnchor=\"middle\"\n        fill=\"#2296F3\"\n        display=\"block\"\n      >\n        {props.text}\n      </text>\n      <path\n        className={checkmarkSvgCheck}\n        fill=\"none\"\n        d=\"m11.1 19.2 l4.1 6.2 14-14\"\n        dominantBaseline=\"middle\"\n        alignmentBaseline=\"middle\"\n      />\n    </svg>\n  );\n};\n\nexport default Circle;\n","import React from \"react\";\n\nimport \"./Modal.css\";\n\nconst Modal = (props) => {\n  return props.show ? (\n    <div\n      className=\"Backdrop\"\n      style={{\n        transform: props.show ? \"translateY(0)\" : \"translateY(-100vh)\",\n        opacity: props.show ? \"1\" : \"0\",\n      }}\n    >\n      <div className=\"Backdrop_window\">\n        {props.modalMessage}\n        <button onClick={props.clicked} className=\"Button\">\n          CLOSE\n        </button>\n      </div>\n    </div>\n  ) : null;\n};\n\nexport default Modal;\n","import React, { useState } from \"react\";\nimport axios from \"../../axios\";\n\nimport \"./MainForm.css\";\nimport { checkValidity } from \"../../components/MainForm/Input/CheckValidity/CheckValidity\";\nimport Input from \"../../components/MainForm/Input/Input\";\nimport Circle from \"../../components/MainForm/Circle/Circle\";\nimport Modal from \"../../components/Modal/Modal\";\n\nconst MainForm = (props) => {\n  const [orderForm, setForm] = useState({\n    firstName: {\n      elementType: \"input\",\n      elementConfig: {\n        type: \"text\",\n        label: \"First Name\",\n      },\n      value: \"\",\n      validation: {\n        required: true,\n        minLength: 2,\n        maxLength: 20,\n      },\n      valid: false,\n      touched: false,\n    },\n    lastName: {\n      elementType: \"input\",\n      elementConfig: {\n        type: \"text\",\n        label: \"Last Name\",\n      },\n      value: \"\",\n      validation: {\n        required: true,\n        minLength: 2,\n        maxLength: 20,\n      },\n      valid: false,\n      touched: false,\n    },\n    email: {\n      elementType: \"input\",\n      elementConfig: {\n        type: \"email\",\n        label: \"Your Email\",\n      },\n      value: \"\",\n      validation: {\n        required: true,\n        isEmail: true,\n      },\n      valid: false,\n      touched: false,\n    },\n    time: {\n      elementType: \"checkbox\",\n      elementConfig: {\n        label: \"What is best time to contact you?\",\n        obj: [\n          {\n            label: \"Monday 3pm\",\n            type: \"checkbox\",\n          },\n          {\n            label: \"Tuesday 3pm\",\n            type: \"checkbox\",\n          },\n        ],\n      },\n      value: \"\",\n      validation: {\n        isChecked: true,\n      },\n      valid: false,\n      touched: false,\n    },\n  });\n\n  const [formIsValid, setFormIsValid] = useState(false);\n  const [showModal, setShowModal] = useState(false);\n  const [modalMessage, setModalMessage] = useState(\"\");\n\n  const openModal = () => {\n    setShowModal(true);\n  };\n\n  const closeModal = () => {\n    setShowModal(false);\n    clearForm();\n  };\n\n  const formHandler = (e) => {\n    e.preventDefault();\n\n    const contact = {\n      firstName: orderForm.firstName.value,\n      lastName: orderForm.lastName.value,\n      email: orderForm.email.value,\n      time: orderForm.time.value,\n    };\n\n    axios\n      .post(\"/contacts.json\", contact)\n      .then((res) => {\n        setModalMessage(\"Thank you! Your data was sucessfully submited.\");\n        openModal();\n      })\n      .catch((err) => {\n        console.log(err);\n        setModalMessage(\"Ooops, something went wrong. Please try again.\");\n      });\n  };\n\n  const clearForm = () => {\n    const clearedForm = {\n      ...orderForm,\n    };\n\n    for (let key in clearedForm) {\n      clearedForm[key].value = \"\";\n      clearedForm[key].valid = false;\n      clearedForm[key].touched = false;\n      document\n        .querySelectorAll(\"input[type=checkbox]\")\n        .forEach((el) => (el.checked = false));\n    }\n    setForm(clearedForm);\n    settingValidity(clearedForm);\n  };\n\n  const inputChangedHandler = (e, inputIdentifier) => {\n    const updatedOrderForm = {\n      ...orderForm,\n    };\n    const updatedFormElement = { ...updatedOrderForm[inputIdentifier] };\n    updatedFormElement.value = e.target.value;\n\n    updatedFormElement.valid = checkValidity(\n      updatedFormElement.value,\n      updatedFormElement.validation,\n      e\n    );\n\n    updatedFormElement.touched = true;\n    updatedOrderForm[inputIdentifier] = updatedFormElement;\n\n    let formIsValid = true;\n    for (let inputIdentifier in updatedOrderForm) {\n      formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n    }\n    setForm(updatedOrderForm);\n    setFormIsValid(formIsValid);\n    settingValidity(updatedOrderForm);\n  };\n\n  const settingValidity = (updatedOrderForm) => {\n    const validityArray = [];\n    for (let key in updatedOrderForm) {\n      validityArray.push(updatedOrderForm[key].valid);\n    }\n\n    let resultValidity = {};\n    validityArray.forEach(\n      (el) => (resultValidity[el] = (resultValidity[el] || 0) + 1)\n    );\n\n    const newProgressValidity =\n      (resultValidity.true * 100) / validityArray.length;\n    newProgressValidity\n      ? props.findProgress(newProgressValidity)\n      : props.findProgress(0);\n  };\n\n  const formElementsArray = [];\n  for (let key in orderForm) {\n    formElementsArray.push({\n      id: key,\n      config: orderForm[key],\n    });\n  }\n\n  const buttonClass = [\"Button\"];\n  if (!formIsValid) {\n    buttonClass.push(\"Disabled\");\n  }\n\n  let form = (\n    <form className=\"Form\" autoComplete=\"off\" onSubmit={formHandler}>\n      {formElementsArray.map((el, idx) => {\n        return (\n          <div key={idx + 1} className=\"FormCircleInput\">\n            <Circle\n              text={idx + 1}\n              style={{ marginBottom: \"30px\" }}\n              valid={el.config.valid}\n            />\n            <Input\n              key={el.id}\n              elementType={el.config.elementType}\n              elementConfig={el.config.elementConfig}\n              value={el.config.value}\n              shouldValidate={el.config.validation}\n              invalid={!el.config.valid}\n              touched={el.config.touched}\n              label={el.config.elementConfig.label}\n              changed={(e) => inputChangedHandler(e, el.id)}\n            />\n          </div>\n        );\n      })}\n      <button className={buttonClass.join(\" \")}>SUBMIT</button>\n      <Modal\n        show={showModal}\n        clicked={closeModal}\n        modalMessage={modalMessage}\n      />\n    </form>\n  );\n\n  return <div className=\"MainForm\">{form}</div>;\n};\n\nexport default MainForm;\n","export const checkValidity = (value, rules, e) => {\n  let isValid = true;\n  if (!rules) {\n    return true;\n  }\n\n  if (rules.required) {\n    isValid = value.trim() !== \"\" && isValid;\n  }\n\n  if (rules.minLength) {\n    isValid = value.length >= rules.minLength && isValid;\n  }\n\n  if (rules.maxLength) {\n    isValid = value.length <= rules.maxLength && isValid;\n  }\n\n  if (rules.isEmail) {\n    const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n    isValid = pattern.test(value) && isValid;\n  }\n\n  if (rules.isChecked) {\n    isValid = e.target.checked;\n  }\n\n  return isValid;\n};\n","import React, { useState } from \"react\";\n\nimport \"./App.css\";\nimport Header from \"./components/Header/Header\";\nimport MainForm from \"./containers/MainForm/MainForm\";\n\nconst App = (props) => {\n  const [progress, setProgress] = useState(0);\n\n  const onProgressChange = (passedProgress) => {\n    setProgress(passedProgress);\n  };\n\n  return (\n    <div className=\"App\">\n      <Header progress={progress} />\n      <MainForm findProgress={(el) => onProgressChange(el)} />\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}